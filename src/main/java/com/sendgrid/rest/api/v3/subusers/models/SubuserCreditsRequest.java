/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Subusers
 * The Twilio SendGrid Subusers API allows you to create and manage your Subuser accounts. Subusers are available on [Pro and Premier plans](https://sendgrid.com/pricing), and you can think of them as sub-accounts. Each Subuser can have its own sending domains, IP addresses, and reporting. SendGrid recommends creating Subusers for each of the different types of emails you sendâ€”one Subuser for transactional emails and another for marketing emails. Independent Software Vendor (ISV) customers may also create Subusers for each of their customers.  You can also manage Subusers in the [Twilio SendGrid application user interface](https://app.sendgrid.com/settings/subusers). See [**Subusers**](https://docs.sendgrid.com/ui/account-and-settings/subusers) for more information.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.subusers.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.subusers.models.ResetFrequency1;
import com.sendgrid.rest.api.v3.subusers.models.Type1;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class SubuserCreditsRequest {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("type")
    @Getter
    @Setter
    private Type1 type;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("reset_frequency")
    @Getter
    @Setter
    private ResetFrequency1 resetFrequency;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("total")
    @Getter
    @Setter
    private Integer total;

    public SubuserCreditsRequest() {}

    private SubuserCreditsRequest(Builder builder) {
        this.type = builder.type;
        this.resetFrequency = builder.resetFrequency;
        this.total = builder.total;
    }

    // Builder class for constructing object
    public static class Builder {

        private Type1 type;
        private ResetFrequency1 resetFrequency;
        private Integer total;

        public Builder(Type1 type) {
            this.type = type;
        }

        public Builder resetFrequency(ResetFrequency1 resetFrequency) {
            this.resetFrequency = resetFrequency;
            return this;
        }

        public Builder total(Integer total) {
            this.total = total;
            return this;
        }

        public SubuserCreditsRequest build() {
            return new SubuserCreditsRequest(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            SubuserCreditsRequest.class.getSimpleName() + "(",
            ")"
        );
        if (type != null) joiner.add("type=" + type);
        if (resetFrequency != null) joiner.add(
            "resetFrequency=" + resetFrequency
        );
        if (total != null) joiner.add("total=" + total);
        return joiner.toString();
    }
}
