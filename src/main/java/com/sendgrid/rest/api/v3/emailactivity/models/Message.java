/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Email Activity API
 * The Twilio SendGrid Email Activity API allows you to query all of your stored messages, query individual messages, and download a CSV with data about the stored messages. Once retrieved, you can inspect the data associated with your messages to better understand your mail send. For example, you may retrieve all bounced messages or all messages with the same subject line and search for commonalities among them.  You must [purchase additional email activity history](https://app.sendgrid.com/settings/billing/addons/email_activity) to gain access to the Email Activity Feed API.  See **Getting Started with the Email Activity Feed API** for help building queries and working with this API. You can also work with email activity in the **Activity** section of the [Twilio SendGrid application user interface](https://app.sendgrid.com/email_activity).
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.emailactivity.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.emailactivity.models.Event;
import com.sendgrid.rest.api.v3.emailactivity.models.OutboundIpType;
import com.sendgrid.rest.api.v3.emailactivity.models.Status3;
import java.util.List;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class Message {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("from_email")
    @Getter
    @Setter
    private String fromEmail;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("msg_id")
    @Getter
    @Setter
    private String msgId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subject")
    @Getter
    @Setter
    private String subject;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("to_email")
    @Getter
    @Setter
    private String toEmail;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("status")
    @Getter
    @Setter
    private Status3 status;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("template_id")
    @Getter
    @Setter
    private String templateId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("asm_group_id")
    @Getter
    @Setter
    private Integer asmGroupId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("teammate")
    @Getter
    @Setter
    private String teammate;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("api_key_id")
    @Getter
    @Setter
    private String apiKeyId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("events")
    @Getter
    @Setter
    private List<Event> events;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("originating_ip")
    @Getter
    @Setter
    private String originatingIp;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("categories")
    @Getter
    @Setter
    private List<String> categories;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unique_args")
    @Getter
    @Setter
    private String uniqueArgs;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("outbound_ip")
    @Getter
    @Setter
    private String outboundIp;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("outbound_ip_type")
    @Getter
    @Setter
    private OutboundIpType outboundIpType;

    public Message() {}

    private Message(Builder builder) {
        this.fromEmail = builder.fromEmail;
        this.msgId = builder.msgId;
        this.subject = builder.subject;
        this.toEmail = builder.toEmail;
        this.status = builder.status;
        this.templateId = builder.templateId;
        this.asmGroupId = builder.asmGroupId;
        this.teammate = builder.teammate;
        this.apiKeyId = builder.apiKeyId;
        this.events = builder.events;
        this.originatingIp = builder.originatingIp;
        this.categories = builder.categories;
        this.uniqueArgs = builder.uniqueArgs;
        this.outboundIp = builder.outboundIp;
        this.outboundIpType = builder.outboundIpType;
    }

    // Builder class for constructing object
    public static class Builder {

        private String fromEmail;
        private String msgId;
        private String subject;
        private String toEmail;
        private Status3 status;
        private String templateId;
        private Integer asmGroupId;
        private String teammate;
        private String apiKeyId;
        private List<Event> events;
        private String originatingIp;
        private List<String> categories;
        private String uniqueArgs;
        private String outboundIp;
        private OutboundIpType outboundIpType;

        public Builder(
            String templateId,
            Integer asmGroupId,
            String teammate,
            String apiKeyId,
            List<Event> events,
            String originatingIp,
            List<String> categories,
            String uniqueArgs,
            String outboundIp,
            OutboundIpType outboundIpType
        ) {
            this.templateId = templateId;
            this.asmGroupId = asmGroupId;
            this.teammate = teammate;
            this.apiKeyId = apiKeyId;
            this.events = events;
            this.originatingIp = originatingIp;
            this.categories = categories;
            this.uniqueArgs = uniqueArgs;
            this.outboundIp = outboundIp;
            this.outboundIpType = outboundIpType;
        }

        public Builder fromEmail(String fromEmail) {
            this.fromEmail = fromEmail;
            return this;
        }

        public Builder msgId(String msgId) {
            this.msgId = msgId;
            return this;
        }

        public Builder subject(String subject) {
            this.subject = subject;
            return this;
        }

        public Builder toEmail(String toEmail) {
            this.toEmail = toEmail;
            return this;
        }

        public Builder status(Status3 status) {
            this.status = status;
            return this;
        }

        public Message build() {
            return new Message(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            Message.class.getSimpleName() + "(",
            ")"
        );
        if (fromEmail != null) joiner.add("fromEmail=" + fromEmail);
        if (msgId != null) joiner.add("msgId=" + msgId);
        if (subject != null) joiner.add("subject=" + subject);
        if (toEmail != null) joiner.add("toEmail=" + toEmail);
        if (status != null) joiner.add("status=" + status);
        if (templateId != null) joiner.add("templateId=" + templateId);
        if (asmGroupId != null) joiner.add("asmGroupId=" + asmGroupId);
        if (teammate != null) joiner.add("teammate=" + teammate);
        if (apiKeyId != null) joiner.add("apiKeyId=" + apiKeyId);
        if (events != null) joiner.add("events=" + events);
        if (originatingIp != null) joiner.add("originatingIp=" + originatingIp);
        if (categories != null) joiner.add("categories=" + categories);
        if (uniqueArgs != null) joiner.add("uniqueArgs=" + uniqueArgs);
        if (outboundIp != null) joiner.add("outboundIp=" + outboundIp);
        if (outboundIpType != null) joiner.add(
            "outboundIpType=" + outboundIpType
        );
        return joiner.toString();
    }
}
