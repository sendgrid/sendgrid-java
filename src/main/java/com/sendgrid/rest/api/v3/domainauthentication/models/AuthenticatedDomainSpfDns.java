/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Domain Authentication API
 * The Twilio SendGrid Domain Authentication API allows you to manage your authenticated domains and their settings.  Domain Authentication is a required step when setting up your Twilio SendGrid account because it's essential to ensuring the deliverability of your email. Domain Authentication signals trustworthiness to email inbox providers and your recipients by approving SendGrid to send email on behalf of your domain. For more information, see [**How to Set Up Domain Authentication**](https://sendgrid.com/docs/ui/account-and-settings/how-to-set-up-domain-authentication/).  Each user may have a maximum of 3,000 authenticated domains and 3,000 link brandings. This limit is at the user level, meaning each Subuser belonging to a parent account may have its own 3,000 authenticated domains and 3,000 link brandings.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.domainauthentication.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.domainauthentication.models.AuthenticatedDomainSpfDnsDkim;
import com.sendgrid.rest.api.v3.domainauthentication.models.AuthenticatedDomainSpfDnsDomainSpf;
import com.sendgrid.rest.api.v3.domainauthentication.models.AuthenticatedDomainSpfDnsMailServer;
import com.sendgrid.rest.api.v3.domainauthentication.models.AuthenticatedDomainSpfDnsSubdomainSpf;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class AuthenticatedDomainSpfDns {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("mail_server")
    @Getter
    @Setter
    private AuthenticatedDomainSpfDnsMailServer mailServer;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subdomain_spf")
    @Getter
    @Setter
    private AuthenticatedDomainSpfDnsSubdomainSpf subdomainSpf;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("domain_spf")
    @Getter
    @Setter
    private AuthenticatedDomainSpfDnsDomainSpf domainSpf;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("dkim")
    @Getter
    @Setter
    private AuthenticatedDomainSpfDnsDkim dkim;

    public AuthenticatedDomainSpfDns() {}

    private AuthenticatedDomainSpfDns(Builder builder) {
        this.mailServer = builder.mailServer;
        this.subdomainSpf = builder.subdomainSpf;
        this.domainSpf = builder.domainSpf;
        this.dkim = builder.dkim;
    }

    // Builder class for constructing object
    public static class Builder {

        private AuthenticatedDomainSpfDnsMailServer mailServer;
        private AuthenticatedDomainSpfDnsSubdomainSpf subdomainSpf;
        private AuthenticatedDomainSpfDnsDomainSpf domainSpf;
        private AuthenticatedDomainSpfDnsDkim dkim;

        public Builder(
            AuthenticatedDomainSpfDnsMailServer mailServer,
            AuthenticatedDomainSpfDnsSubdomainSpf subdomainSpf,
            AuthenticatedDomainSpfDnsDomainSpf domainSpf,
            AuthenticatedDomainSpfDnsDkim dkim
        ) {
            this.mailServer = mailServer;
            this.subdomainSpf = subdomainSpf;
            this.domainSpf = domainSpf;
            this.dkim = dkim;
        }

        public AuthenticatedDomainSpfDns build() {
            return new AuthenticatedDomainSpfDns(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            AuthenticatedDomainSpfDns.class.getSimpleName() + "(",
            ")"
        );
        if (mailServer != null) joiner.add("mailServer=" + mailServer);
        if (subdomainSpf != null) joiner.add("subdomainSpf=" + subdomainSpf);
        if (domainSpf != null) joiner.add("domainSpf=" + domainSpf);
        if (dkim != null) joiner.add("dkim=" + dkim);
        return joiner.toString();
    }
}
