/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid IP Address Management API
 * The Twilio SendGrid IP Address Management API combines functionality that was previously split between the Twilio SendGrid [IP Address API](https://docs.sendgrid.com/api-reference/ip-address) and [IP Pools API](https://docs.sendgrid.com/api-reference/ip-pools). This functionality includes adding IP addresses to your account, assigning IP addresses to IP Pools and Subusers, among other tasks.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.ipaddressmanagement;

import com.sendgrid.base.apikey.ApiKeyBase;
import com.sendgrid.constant.ApplicationConstants;
import com.sendgrid.constant.Domains;
import com.sendgrid.exception.ApiConnectionException;
import com.sendgrid.exception.ApiErrorResponse;
import com.sendgrid.exception.GenericApiError;
import com.sendgrid.http.ApiKeyRestClient;
import com.sendgrid.http.ApiResponse;
import com.sendgrid.http.HttpMethod;
import com.sendgrid.http.Request;
import com.sendgrid.http.Response;
import com.sendgrid.rest.api.v3.ipaddressmanagement.models.IpAddressManagementErrorResponse;
import com.sendgrid.rest.api.v3.ipaddressmanagement.models.ListIp200Response;
import com.sendgrid.rest.api.v3.ipaddressmanagement.models.Region7;
import com.sendgrid.util.JsonUtil;
import com.sendgrid.util.Matcher;
import lombok.RequiredArgsConstructor;
import lombok.Setter;

@RequiredArgsConstructor
public class ListIp extends ApiKeyBase {

    @Setter
    private String ip;

    @Setter
    private Integer limit;

    @Setter
    private Integer afterKey;

    @Setter
    private String beforeKey;

    @Setter
    private Boolean isLeased;

    @Setter
    private Boolean isEnabled;

    @Setter
    private Boolean isParentAssigned;

    @Setter
    private String pool;

    @Setter
    private Integer startAddedAt;

    @Setter
    private Integer endAddedAt;

    @Setter
    private Region7 region;

    @Setter
    private Boolean includeRegion;

    public ApiResponse<ListIp200Response> send(final ApiKeyRestClient client) {
        String path = "/v3/send_ips/ips";
        Request request = new Request(
            HttpMethod.GET,
            path,
            Domains.API.toString()
        );
        addQueryParams(request);
        Response response = client.request(request);

        if (response == null) {
            throw new ApiConnectionException(
                "ListIp creation failed: Unable to connect to server"
            );
        } else if (
            !ApplicationConstants.SUCCESS.test(response.getStatusCode())
        ) {
            int statusCode = response.getStatusCode();
            if (Matcher.matches(Integer.toString(statusCode), "400")) {
                IpAddressManagementErrorResponse error = JsonUtil.fromJson(
                    response.getStream(),
                    IpAddressManagementErrorResponse.class
                );
                throw new ApiErrorResponse(
                    statusCode,
                    null,
                    error,
                    response.getHeaders()
                );
            }

            if (Matcher.matches(Integer.toString(statusCode), "401")) {
                IpAddressManagementErrorResponse error = JsonUtil.fromJson(
                    response.getStream(),
                    IpAddressManagementErrorResponse.class
                );
                throw new ApiErrorResponse(
                    statusCode,
                    null,
                    error,
                    response.getHeaders()
                );
            }

            if (Matcher.matches(Integer.toString(statusCode), "500")) {
                IpAddressManagementErrorResponse error = JsonUtil.fromJson(
                    response.getStream(),
                    IpAddressManagementErrorResponse.class
                );
                throw new ApiErrorResponse(
                    statusCode,
                    null,
                    error,
                    response.getHeaders()
                );
            }

            GenericApiError error = JsonUtil.fromJson(
                response.getStream(),
                GenericApiError.class
            );
            throw new ApiErrorResponse(
                statusCode,
                null,
                error,
                response.getHeaders()
            );
        }
        int statusCode = response.getStatusCode();
        return new ApiResponse(
            statusCode,
            JsonUtil.fromJson(response.getStream(), ListIp200Response.class),
            response.getHeaders()
        );
    }

    private void addQueryParams(Request request) {
        if (ip != null) {
            request.addQueryParam("ip", ip.toString());
        }
        if (limit != null) {
            request.addQueryParam("limit", limit.toString());
        }
        if (afterKey != null) {
            request.addQueryParam("after_key", afterKey.toString());
        }
        if (beforeKey != null) {
            request.addQueryParam("before_key", beforeKey.toString());
        }
        if (isLeased != null) {
            request.addQueryParam("is_leased", isLeased.toString());
        }
        if (isEnabled != null) {
            request.addQueryParam("is_enabled", isEnabled.toString());
        }
        if (isParentAssigned != null) {
            request.addQueryParam(
                "is_parent_assigned",
                isParentAssigned.toString()
            );
        }
        if (pool != null) {
            request.addQueryParam("pool", pool.toString());
        }
        if (startAddedAt != null) {
            request.addQueryParam("start_added_at", startAddedAt.toString());
        }
        if (endAddedAt != null) {
            request.addQueryParam("end_added_at", endAddedAt.toString());
        }
        if (region != null) {
            request.addQueryParam("region", region.toString());
        }
        if (includeRegion != null) {
            request.addQueryParam("include_region", includeRegion.toString());
        }
    }
}
