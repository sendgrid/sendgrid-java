/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Teammates API
 * The Twilio SendGrid Teammates API allows you to add, manage, and remove Teammates, or user accounts, from your SendGrid account. Teammates function like user accounts on the SendGrid account, allowing you to invite additional users to your account with scoped access. You can think of Teammates as SendGrid's approach to enabling [role-based access control](https://en.wikipedia.org/wiki/Role-based_access_control) for your SendGrid account. For even more control over the access to your account, see the [Twilio SendGrid SSO API](https://docs.sendgrid.com/api-reference/single-sign-on-teammates/), which enables SSO-authenticated Teammates to be managed through a SAML 2.0 identity provider.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.teammates.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.teammates.models.PermissionType;
import java.util.List;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class ListSubuserByTemplate200ResponseSubuserAccessInner {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private Integer id;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("username")
    @Getter
    @Setter
    private String username;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("email")
    @Getter
    @Setter
    private String email;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("disabled")
    @Getter
    @Setter
    private Boolean disabled;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("permission_type")
    @Getter
    @Setter
    private PermissionType permissionType;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("scopes")
    @Getter
    @Setter
    private List<String> scopes;

    public ListSubuserByTemplate200ResponseSubuserAccessInner() {}

    private ListSubuserByTemplate200ResponseSubuserAccessInner(
        Builder builder
    ) {
        this.id = builder.id;
        this.username = builder.username;
        this.email = builder.email;
        this.disabled = builder.disabled;
        this.permissionType = builder.permissionType;
        this.scopes = builder.scopes;
    }

    // Builder class for constructing object
    public static class Builder {

        private Integer id;
        private String username;
        private String email;
        private Boolean disabled;
        private PermissionType permissionType;
        private List<String> scopes;

        public Builder() {}

        public Builder id(Integer id) {
            this.id = id;
            return this;
        }

        public Builder username(String username) {
            this.username = username;
            return this;
        }

        public Builder email(String email) {
            this.email = email;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            this.disabled = disabled;
            return this;
        }

        public Builder permissionType(PermissionType permissionType) {
            this.permissionType = permissionType;
            return this;
        }

        public Builder scopes(List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        public ListSubuserByTemplate200ResponseSubuserAccessInner build() {
            return new ListSubuserByTemplate200ResponseSubuserAccessInner(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            ListSubuserByTemplate200ResponseSubuserAccessInner.class.getSimpleName() +
            "(",
            ")"
        );
        if (id != null) joiner.add("id=" + id);
        if (username != null) joiner.add("username=" + username);
        if (email != null) joiner.add("email=" + email);
        if (disabled != null) joiner.add("disabled=" + disabled);
        if (permissionType != null) joiner.add(
            "permissionType=" + permissionType
        );
        if (scopes != null) joiner.add("scopes=" + scopes);
        return joiner.toString();
    }
}
