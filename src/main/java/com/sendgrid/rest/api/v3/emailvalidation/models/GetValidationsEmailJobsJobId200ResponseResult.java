/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Email Address Validation API
 * The Twilio SendGrid Email Address Validation API provides real-time detailed information on the validity of email addresses. You can integrate this validation process into your platform's signup form and customize the best use of email address validation for your use case.  Email Address Validation is available to [Email API Pro and Premier level accounts](https://sendgrid.com/pricing) only. Prior to upgrading your account to Pro or Premier, you will not see the option to create an Email Validation API key. An Email Validation API key is separate from and in addition to your other keys, including Full Access API keys.  You can use this API to: - Indicate to users that the address they have entered into a form is invalid. - Drop invalid email addresses from your database. - Suppress invalid email addresses from your sending to decrease your bounce rate.  See [**Email Address Validation**](https://docs.sendgrid.com/ui/managing-contacts/email-address-validation) for more information.  You can also view your Email Validation results and metrics in the Validation section of the [Twilio SendGrid application user interface](https://docs.sendgrid.com/ui/managing-contacts/email-address-validation).
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.emailvalidation.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.emailvalidation.models.GetValidationsEmailJobsJobId200ResponseResultErrorsInner;
import com.sendgrid.rest.api.v3.emailvalidation.models.Status1;
import java.math.BigDecimal;
import java.util.List;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class GetValidationsEmailJobsJobId200ResponseResult {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private String id;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("status")
    @Getter
    @Setter
    private Status1 status;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("segments")
    @Getter
    @Setter
    private BigDecimal segments;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("segments_processed")
    @Getter
    @Setter
    private BigDecimal segmentsProcessed;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("is_download_available")
    @Getter
    @Setter
    private Boolean isDownloadAvailable;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("started_at")
    @Getter
    @Setter
    private BigDecimal startedAt;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("finished_at")
    @Getter
    @Setter
    private BigDecimal finishedAt;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("errors")
    @Getter
    @Setter
    private List<
        GetValidationsEmailJobsJobId200ResponseResultErrorsInner
    > errors;

    public GetValidationsEmailJobsJobId200ResponseResult() {}

    private GetValidationsEmailJobsJobId200ResponseResult(Builder builder) {
        this.id = builder.id;
        this.status = builder.status;
        this.segments = builder.segments;
        this.segmentsProcessed = builder.segmentsProcessed;
        this.isDownloadAvailable = builder.isDownloadAvailable;
        this.startedAt = builder.startedAt;
        this.finishedAt = builder.finishedAt;
        this.errors = builder.errors;
    }

    // Builder class for constructing object
    public static class Builder {

        private String id;
        private Status1 status;
        private BigDecimal segments;
        private BigDecimal segmentsProcessed;
        private Boolean isDownloadAvailable;
        private BigDecimal startedAt;
        private BigDecimal finishedAt;
        private List<
            GetValidationsEmailJobsJobId200ResponseResultErrorsInner
        > errors;

        public Builder() {}

        public Builder id(String id) {
            this.id = id;
            return this;
        }

        public Builder status(Status1 status) {
            this.status = status;
            return this;
        }

        public Builder segments(BigDecimal segments) {
            this.segments = segments;
            return this;
        }

        public Builder segmentsProcessed(BigDecimal segmentsProcessed) {
            this.segmentsProcessed = segmentsProcessed;
            return this;
        }

        public Builder isDownloadAvailable(Boolean isDownloadAvailable) {
            this.isDownloadAvailable = isDownloadAvailable;
            return this;
        }

        public Builder startedAt(BigDecimal startedAt) {
            this.startedAt = startedAt;
            return this;
        }

        public Builder finishedAt(BigDecimal finishedAt) {
            this.finishedAt = finishedAt;
            return this;
        }

        public Builder errors(
            List<
                GetValidationsEmailJobsJobId200ResponseResultErrorsInner
            > errors
        ) {
            this.errors = errors;
            return this;
        }

        public GetValidationsEmailJobsJobId200ResponseResult build() {
            return new GetValidationsEmailJobsJobId200ResponseResult(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            GetValidationsEmailJobsJobId200ResponseResult.class.getSimpleName() +
            "(",
            ")"
        );
        if (id != null) joiner.add("id=" + id);
        if (status != null) joiner.add("status=" + status);
        if (segments != null) joiner.add("segments=" + segments);
        if (segmentsProcessed != null) joiner.add(
            "segmentsProcessed=" + segmentsProcessed
        );
        if (isDownloadAvailable != null) joiner.add(
            "isDownloadAvailable=" + isDownloadAvailable
        );
        if (startedAt != null) joiner.add("startedAt=" + startedAt);
        if (finishedAt != null) joiner.add("finishedAt=" + finishedAt);
        if (errors != null) joiner.add("errors=" + errors);
        return joiner.toString();
    }
}
