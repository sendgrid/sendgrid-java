/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Marketing Campaigns Segments 2.0 API
 * The Twilio SendGrid Marketing Campaigns Segments V2 API allows you to create, edit, and delete segments as well as retrieve a list of segments or an individual segment by ID.  Segments are similar to contact lists, except they update dynamically over time as information stored about your contacts or the criteria used to define your segments changes. When you segment your audience, you are able to create personalized Automation emails and Single Sends that directly address the wants and needs of your particular audience.  Note that Twilio SendGrid checks for newly added or modified contacts who meet a segment's criteria on an hourly schedule. Only existing contacts who meet a segment's criteria will be included in the segment searches within 15 minutes.  Segments built using engagement data such as \"was sent\" or \"clicked\" will take approximately 30 minutes to begin populating.  Segment samples and counts are refreshed approximately once per hour; they do not update immediately. If no contacts are added to or removed from a segment since the last refresh, the sample and UI count displayed will be refreshed at increasing time intervals with a maximum sample and count refresh delay of 24 hours.  You can also manage your Segments with the [Marketing Campaigns application user interface](https://mc.sendgrid.com/contacts). See [**Segmenting Your Contacts**](https://docs.sendgrid.com/ui/managing-contacts/segmenting-your-contacts) for more information.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.mcsegments2.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.mcsegments2.models.ContactResponse;
import com.sendgrid.rest.api.v3.mcsegments2.models.SegmentStatusResponse;
import java.util.List;
import java.util.StringJoiner;
import java.util.UUID;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class Segment2xx {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private UUID id;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("name")
    @Getter
    @Setter
    private String name;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("query_dsl")
    @Getter
    @Setter
    private String queryDsl;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("contacts_count")
    @Getter
    @Setter
    private Integer contactsCount;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("contacts_sample")
    @Getter
    @Setter
    private List<ContactResponse> contactsSample;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("created_at")
    @Getter
    @Setter
    private String createdAt;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("updated_at")
    @Getter
    @Setter
    private String updatedAt;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("sample_updated_at")
    @Getter
    @Setter
    private String sampleUpdatedAt;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("next_sample_update")
    @Getter
    @Setter
    private String nextSampleUpdate;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("parent_list_ids")
    @Getter
    @Setter
    private List<String> parentListIds;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("query_version")
    @Getter
    @Setter
    private String queryVersion;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("status")
    @Getter
    @Setter
    private SegmentStatusResponse status;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("refreshes_used")
    @Getter
    @Setter
    private Integer refreshesUsed;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("max_refreshes")
    @Getter
    @Setter
    private Integer maxRefreshes;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("last_refreshed_at")
    @Getter
    @Setter
    private String lastRefreshedAt;

    public Segment2xx() {}

    private Segment2xx(Builder builder) {
        this.id = builder.id;
        this.name = builder.name;
        this.queryDsl = builder.queryDsl;
        this.contactsCount = builder.contactsCount;
        this.contactsSample = builder.contactsSample;
        this.createdAt = builder.createdAt;
        this.updatedAt = builder.updatedAt;
        this.sampleUpdatedAt = builder.sampleUpdatedAt;
        this.nextSampleUpdate = builder.nextSampleUpdate;
        this.parentListIds = builder.parentListIds;
        this.queryVersion = builder.queryVersion;
        this.status = builder.status;
        this.refreshesUsed = builder.refreshesUsed;
        this.maxRefreshes = builder.maxRefreshes;
        this.lastRefreshedAt = builder.lastRefreshedAt;
    }

    // Builder class for constructing object
    public static class Builder {

        private UUID id;
        private String name;
        private String queryDsl;
        private Integer contactsCount;
        private List<ContactResponse> contactsSample;
        private String createdAt;
        private String updatedAt;
        private String sampleUpdatedAt;
        private String nextSampleUpdate;
        private List<String> parentListIds;
        private String queryVersion;
        private SegmentStatusResponse status;
        private Integer refreshesUsed;
        private Integer maxRefreshes;
        private String lastRefreshedAt;

        public Builder(
            UUID id,
            String name,
            String queryDsl,
            Integer contactsCount,
            List<ContactResponse> contactsSample,
            String createdAt,
            String updatedAt,
            String sampleUpdatedAt,
            String nextSampleUpdate,
            List<String> parentListIds,
            String queryVersion,
            SegmentStatusResponse status
        ) {
            this.id = id;
            this.name = name;
            this.queryDsl = queryDsl;
            this.contactsCount = contactsCount;
            this.contactsSample = contactsSample;
            this.createdAt = createdAt;
            this.updatedAt = updatedAt;
            this.sampleUpdatedAt = sampleUpdatedAt;
            this.nextSampleUpdate = nextSampleUpdate;
            this.parentListIds = parentListIds;
            this.queryVersion = queryVersion;
            this.status = status;
        }

        public Builder refreshesUsed(Integer refreshesUsed) {
            this.refreshesUsed = refreshesUsed;
            return this;
        }

        public Builder maxRefreshes(Integer maxRefreshes) {
            this.maxRefreshes = maxRefreshes;
            return this;
        }

        public Builder lastRefreshedAt(String lastRefreshedAt) {
            this.lastRefreshedAt = lastRefreshedAt;
            return this;
        }

        public Segment2xx build() {
            return new Segment2xx(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            Segment2xx.class.getSimpleName() + "(",
            ")"
        );
        if (id != null) joiner.add("id=" + id);
        if (name != null) joiner.add("name=" + name);
        if (queryDsl != null) joiner.add("queryDsl=" + queryDsl);
        if (contactsCount != null) joiner.add("contactsCount=" + contactsCount);
        if (contactsSample != null) joiner.add(
            "contactsSample=" + contactsSample
        );
        if (createdAt != null) joiner.add("createdAt=" + createdAt);
        if (updatedAt != null) joiner.add("updatedAt=" + updatedAt);
        if (sampleUpdatedAt != null) joiner.add(
            "sampleUpdatedAt=" + sampleUpdatedAt
        );
        if (nextSampleUpdate != null) joiner.add(
            "nextSampleUpdate=" + nextSampleUpdate
        );
        if (parentListIds != null) joiner.add("parentListIds=" + parentListIds);
        if (queryVersion != null) joiner.add("queryVersion=" + queryVersion);
        if (status != null) joiner.add("status=" + status);
        if (refreshesUsed != null) joiner.add("refreshesUsed=" + refreshesUsed);
        if (maxRefreshes != null) joiner.add("maxRefreshes=" + maxRefreshes);
        if (lastRefreshedAt != null) joiner.add(
            "lastRefreshedAt=" + lastRefreshedAt
        );
        return joiner.toString();
    }
}
