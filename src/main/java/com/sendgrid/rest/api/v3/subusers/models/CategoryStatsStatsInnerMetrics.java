/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Subusers
 * The Twilio SendGrid Subusers API allows you to create and manage your Subuser accounts. Subusers are available on [Pro and Premier plans](https://sendgrid.com/pricing), and you can think of them as sub-accounts. Each Subuser can have its own sending domains, IP addresses, and reporting. SendGrid recommends creating Subusers for each of the different types of emails you sendâ€”one Subuser for transactional emails and another for marketing emails. Independent Software Vendor (ISV) customers may also create Subusers for each of their customers.  You can also manage Subusers in the [Twilio SendGrid application user interface](https://app.sendgrid.com/settings/subusers). See [**Subusers**](https://docs.sendgrid.com/ui/account-and-settings/subusers) for more information.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.subusers.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class CategoryStatsStatsInnerMetrics {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("blocks")
    @Getter
    @Setter
    private Integer blocks;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("bounce_drops")
    @Getter
    @Setter
    private Integer bounceDrops;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("bounces")
    @Getter
    @Setter
    private Integer bounces;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("clicks")
    @Getter
    @Setter
    private Integer clicks;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("deferred")
    @Getter
    @Setter
    private Integer deferred;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("delivered")
    @Getter
    @Setter
    private Integer delivered;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("invalid_emails")
    @Getter
    @Setter
    private Integer invalidEmails;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("opens")
    @Getter
    @Setter
    private Integer opens;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("processed")
    @Getter
    @Setter
    private Integer processed;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("requests")
    @Getter
    @Setter
    private Integer requests;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("spam_report_drops")
    @Getter
    @Setter
    private Integer spamReportDrops;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("spam_reports")
    @Getter
    @Setter
    private Integer spamReports;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unique_clicks")
    @Getter
    @Setter
    private Integer uniqueClicks;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unique_opens")
    @Getter
    @Setter
    private Integer uniqueOpens;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unsubscribe_drops")
    @Getter
    @Setter
    private Integer unsubscribeDrops;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unsubscribes")
    @Getter
    @Setter
    private Integer unsubscribes;

    public CategoryStatsStatsInnerMetrics() {}

    private CategoryStatsStatsInnerMetrics(Builder builder) {
        this.blocks = builder.blocks;
        this.bounceDrops = builder.bounceDrops;
        this.bounces = builder.bounces;
        this.clicks = builder.clicks;
        this.deferred = builder.deferred;
        this.delivered = builder.delivered;
        this.invalidEmails = builder.invalidEmails;
        this.opens = builder.opens;
        this.processed = builder.processed;
        this.requests = builder.requests;
        this.spamReportDrops = builder.spamReportDrops;
        this.spamReports = builder.spamReports;
        this.uniqueClicks = builder.uniqueClicks;
        this.uniqueOpens = builder.uniqueOpens;
        this.unsubscribeDrops = builder.unsubscribeDrops;
        this.unsubscribes = builder.unsubscribes;
    }

    // Builder class for constructing object
    public static class Builder {

        private Integer blocks;
        private Integer bounceDrops;
        private Integer bounces;
        private Integer clicks;
        private Integer deferred;
        private Integer delivered;
        private Integer invalidEmails;
        private Integer opens;
        private Integer processed;
        private Integer requests;
        private Integer spamReportDrops;
        private Integer spamReports;
        private Integer uniqueClicks;
        private Integer uniqueOpens;
        private Integer unsubscribeDrops;
        private Integer unsubscribes;

        public Builder(
            Integer blocks,
            Integer bounceDrops,
            Integer bounces,
            Integer clicks,
            Integer deferred,
            Integer delivered,
            Integer invalidEmails,
            Integer opens,
            Integer processed,
            Integer requests,
            Integer spamReportDrops,
            Integer spamReports,
            Integer uniqueClicks,
            Integer uniqueOpens,
            Integer unsubscribeDrops,
            Integer unsubscribes
        ) {
            this.blocks = blocks;
            this.bounceDrops = bounceDrops;
            this.bounces = bounces;
            this.clicks = clicks;
            this.deferred = deferred;
            this.delivered = delivered;
            this.invalidEmails = invalidEmails;
            this.opens = opens;
            this.processed = processed;
            this.requests = requests;
            this.spamReportDrops = spamReportDrops;
            this.spamReports = spamReports;
            this.uniqueClicks = uniqueClicks;
            this.uniqueOpens = uniqueOpens;
            this.unsubscribeDrops = unsubscribeDrops;
            this.unsubscribes = unsubscribes;
        }

        public CategoryStatsStatsInnerMetrics build() {
            return new CategoryStatsStatsInnerMetrics(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            CategoryStatsStatsInnerMetrics.class.getSimpleName() + "(",
            ")"
        );
        if (blocks != null) joiner.add("blocks=" + blocks);
        if (bounceDrops != null) joiner.add("bounceDrops=" + bounceDrops);
        if (bounces != null) joiner.add("bounces=" + bounces);
        if (clicks != null) joiner.add("clicks=" + clicks);
        if (deferred != null) joiner.add("deferred=" + deferred);
        if (delivered != null) joiner.add("delivered=" + delivered);
        if (invalidEmails != null) joiner.add("invalidEmails=" + invalidEmails);
        if (opens != null) joiner.add("opens=" + opens);
        if (processed != null) joiner.add("processed=" + processed);
        if (requests != null) joiner.add("requests=" + requests);
        if (spamReportDrops != null) joiner.add(
            "spamReportDrops=" + spamReportDrops
        );
        if (spamReports != null) joiner.add("spamReports=" + spamReports);
        if (uniqueClicks != null) joiner.add("uniqueClicks=" + uniqueClicks);
        if (uniqueOpens != null) joiner.add("uniqueOpens=" + uniqueOpens);
        if (unsubscribeDrops != null) joiner.add(
            "unsubscribeDrops=" + unsubscribeDrops
        );
        if (unsubscribes != null) joiner.add("unsubscribes=" + unsubscribes);
        return joiner.toString();
    }
}
