/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Single Sign-On API
 * The Single Sign-On API allows you to manage your SAML 2.0 SSO configurations. You can also work with your SSO integrations using the SSO section of the [Twilio SendGrid application user interface](https://app.sendgrid.com/settings/sso).  The Single Sign-On Settings operations allow you to create, retrieve, modify, and delete SSO integrations for your Twilio SendGrid account. Each integration will correspond to a specific IdP such as Okta, Duo, or Microsoft Azure Active Directory.  The Single Sign-On Certificates operations allow you to create, modify, and delete SSO certificates. A SAML certificate allows your IdP and Twilio SendGrid to verify requests are coming from one another using the `public_certificate` and `integration_id` parameters.  The Single Sign-On Teammates operations allow you to add and modify SSO Teammates. SSO Teammates are the individual user accounts who will access your Twilio SendGrid account with SSO credentials. To retrieve or delete an SSO Teammate, you will use the separate [Teammates API](https://docs.sendgrid.com/api-reference/teammates/).
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.sso.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.sso.models.SsoTeammatesRestrictedSubuserResponsePropsSubuserAccessInner;
import com.sendgrid.rest.api.v3.sso.models.UserType;
import java.util.List;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class PatchSsoTeammates200 {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("address")
    @Getter
    @Setter
    private String address;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("address2")
    @Getter
    @Setter
    private String address2;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("city")
    @Getter
    @Setter
    private String city;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("company")
    @Getter
    @Setter
    private String company;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("country")
    @Getter
    @Setter
    private String country;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("username")
    @Getter
    @Setter
    private String username;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("phone")
    @Getter
    @Setter
    private String phone;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("state")
    @Getter
    @Setter
    private String state;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("user_type")
    @Getter
    @Setter
    private UserType userType;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("website")
    @Getter
    @Setter
    private String website;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("zip")
    @Getter
    @Setter
    private String zip;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("first_name")
    @Getter
    @Setter
    private String firstName;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("last_name")
    @Getter
    @Setter
    private String lastName;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("email")
    @Getter
    @Setter
    private String email;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("is_admin")
    @Getter
    @Setter
    private Boolean isAdmin;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("is_sso")
    @Getter
    @Setter
    private Boolean isSso;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("scopes")
    @Getter
    @Setter
    private List<String> scopes;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("has_restricted_subuser_access")
    @Getter
    @Setter
    private Boolean hasRestrictedSubuserAccess;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subuser_access")
    @Getter
    @Setter
    private List<
        SsoTeammatesRestrictedSubuserResponsePropsSubuserAccessInner
    > subuserAccess;

    public PatchSsoTeammates200() {}

    private PatchSsoTeammates200(Builder builder) {
        this.address = builder.address;
        this.address2 = builder.address2;
        this.city = builder.city;
        this.company = builder.company;
        this.country = builder.country;
        this.username = builder.username;
        this.phone = builder.phone;
        this.state = builder.state;
        this.userType = builder.userType;
        this.website = builder.website;
        this.zip = builder.zip;
        this.firstName = builder.firstName;
        this.lastName = builder.lastName;
        this.email = builder.email;
        this.isAdmin = builder.isAdmin;
        this.isSso = builder.isSso;
        this.scopes = builder.scopes;
        this.hasRestrictedSubuserAccess = builder.hasRestrictedSubuserAccess;
        this.subuserAccess = builder.subuserAccess;
    }

    // Builder class for constructing object
    public static class Builder {

        private String address;
        private String address2;
        private String city;
        private String company;
        private String country;
        private String username;
        private String phone;
        private String state;
        private UserType userType;
        private String website;
        private String zip;
        private String firstName;
        private String lastName;
        private String email;
        private Boolean isAdmin;
        private Boolean isSso;
        private List<String> scopes;
        private Boolean hasRestrictedSubuserAccess;
        private List<
            SsoTeammatesRestrictedSubuserResponsePropsSubuserAccessInner
        > subuserAccess;

        public Builder() {}

        public Builder address(String address) {
            this.address = address;
            return this;
        }

        public Builder address2(String address2) {
            this.address2 = address2;
            return this;
        }

        public Builder city(String city) {
            this.city = city;
            return this;
        }

        public Builder company(String company) {
            this.company = company;
            return this;
        }

        public Builder country(String country) {
            this.country = country;
            return this;
        }

        public Builder username(String username) {
            this.username = username;
            return this;
        }

        public Builder phone(String phone) {
            this.phone = phone;
            return this;
        }

        public Builder state(String state) {
            this.state = state;
            return this;
        }

        public Builder userType(UserType userType) {
            this.userType = userType;
            return this;
        }

        public Builder website(String website) {
            this.website = website;
            return this;
        }

        public Builder zip(String zip) {
            this.zip = zip;
            return this;
        }

        public Builder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }

        public Builder email(String email) {
            this.email = email;
            return this;
        }

        public Builder isAdmin(Boolean isAdmin) {
            this.isAdmin = isAdmin;
            return this;
        }

        public Builder isSso(Boolean isSso) {
            this.isSso = isSso;
            return this;
        }

        public Builder scopes(List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        public Builder hasRestrictedSubuserAccess(
            Boolean hasRestrictedSubuserAccess
        ) {
            this.hasRestrictedSubuserAccess = hasRestrictedSubuserAccess;
            return this;
        }

        public Builder subuserAccess(
            List<
                SsoTeammatesRestrictedSubuserResponsePropsSubuserAccessInner
            > subuserAccess
        ) {
            this.subuserAccess = subuserAccess;
            return this;
        }

        public PatchSsoTeammates200 build() {
            return new PatchSsoTeammates200(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            PatchSsoTeammates200.class.getSimpleName() + "(",
            ")"
        );
        if (address != null) joiner.add("address=" + address);
        if (address2 != null) joiner.add("address2=" + address2);
        if (city != null) joiner.add("city=" + city);
        if (company != null) joiner.add("company=" + company);
        if (country != null) joiner.add("country=" + country);
        if (username != null) joiner.add("username=" + username);
        if (phone != null) joiner.add("phone=" + phone);
        if (state != null) joiner.add("state=" + state);
        if (userType != null) joiner.add("userType=" + userType);
        if (website != null) joiner.add("website=" + website);
        if (zip != null) joiner.add("zip=" + zip);
        if (firstName != null) joiner.add("firstName=" + firstName);
        if (lastName != null) joiner.add("lastName=" + lastName);
        if (email != null) joiner.add("email=" + email);
        if (isAdmin != null) joiner.add("isAdmin=" + isAdmin);
        if (isSso != null) joiner.add("isSso=" + isSso);
        if (scopes != null) joiner.add("scopes=" + scopes);
        if (hasRestrictedSubuserAccess != null) joiner.add(
            "hasRestrictedSubuserAccess=" + hasRestrictedSubuserAccess
        );
        if (subuserAccess != null) joiner.add("subuserAccess=" + subuserAccess);
        return joiner.toString();
    }
}
