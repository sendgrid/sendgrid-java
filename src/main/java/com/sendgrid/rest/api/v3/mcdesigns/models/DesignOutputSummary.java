/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Marketing Campaigns Designs
 * The Twilio SendGrid Designs API offers the ability to manage assets stored in the Twilio SendGrid [Design Library](https://mc.sendgrid.com/design-library/my-designs).  The Design Library is a feature-rich email layout tool and media repository. You can [build designs for all your marketing email needs](https://sendgrid.com/docs/ui/sending-email/working-with-marketing-campaigns-email-designs/), including Single Sends and Automations.  You can also duplicate and then modify one of the pre-built designs provided by Twilio SendGrid to get you started.  The Designs API provides a REST-like interface for creating new designs, retrieving a list of existing designs, duplicating or updating a design, and deleting a design.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.mcdesigns.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.mcdesigns.models.Editor;
import java.util.StringJoiner;
import java.util.UUID;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class DesignOutputSummary {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private UUID id;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("updated_at")
    @Getter
    @Setter
    private String updatedAt;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("created_at")
    @Getter
    @Setter
    private String createdAt;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("thumbnail_url")
    @Getter
    @Setter
    private String thumbnailUrl;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("name")
    @Getter
    @Setter
    private String name;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("editor")
    @Getter
    @Setter
    private Editor editor;

    public DesignOutputSummary() {}

    private DesignOutputSummary(Builder builder) {
        this.id = builder.id;
        this.updatedAt = builder.updatedAt;
        this.createdAt = builder.createdAt;
        this.thumbnailUrl = builder.thumbnailUrl;
        this.name = builder.name;
        this.editor = builder.editor;
    }

    // Builder class for constructing object
    public static class Builder {

        private UUID id;
        private String updatedAt;
        private String createdAt;
        private String thumbnailUrl;
        private String name;
        private Editor editor;

        public Builder() {}

        public Builder id(UUID id) {
            this.id = id;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder createdAt(String createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder thumbnailUrl(String thumbnailUrl) {
            this.thumbnailUrl = thumbnailUrl;
            return this;
        }

        public Builder name(String name) {
            this.name = name;
            return this;
        }

        public Builder editor(Editor editor) {
            this.editor = editor;
            return this;
        }

        public DesignOutputSummary build() {
            return new DesignOutputSummary(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            DesignOutputSummary.class.getSimpleName() + "(",
            ")"
        );
        if (id != null) joiner.add("id=" + id);
        if (updatedAt != null) joiner.add("updatedAt=" + updatedAt);
        if (createdAt != null) joiner.add("createdAt=" + createdAt);
        if (thumbnailUrl != null) joiner.add("thumbnailUrl=" + thumbnailUrl);
        if (name != null) joiner.add("name=" + name);
        if (editor != null) joiner.add("editor=" + editor);
        return joiner.toString();
    }
}
