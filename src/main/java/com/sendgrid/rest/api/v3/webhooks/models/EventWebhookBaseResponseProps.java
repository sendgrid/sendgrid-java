/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Webhook Configuration API
 * The Twilio SendGrid Webhooks API allows you to configure the Event and Parse Webhooks.  Email is a data-rich channel, and implementing the Event Webhook will allow you to consume those data in nearly real time. This means you can actively monitor and participate in the health of your email program throughout the send cycle.  The Inbound Parse Webhook processes all incoming email for a domain or subdomain, parses the contents and attachments and then POSTs `multipart/form-data` to a URL that you choose.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.webhooks.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class EventWebhookBaseResponseProps {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("enabled")
    @Getter
    @Setter
    private Boolean enabled;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("url")
    @Getter
    @Setter
    private String url;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("account_status_change")
    @Getter
    @Setter
    private Boolean accountStatusChange;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("group_resubscribe")
    @Getter
    @Setter
    private Boolean groupResubscribe;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("delivered")
    @Getter
    @Setter
    private Boolean delivered;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("group_unsubscribe")
    @Getter
    @Setter
    private Boolean groupUnsubscribe;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("spam_report")
    @Getter
    @Setter
    private Boolean spamReport;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("bounce")
    @Getter
    @Setter
    private Boolean bounce;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("deferred")
    @Getter
    @Setter
    private Boolean deferred;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unsubscribe")
    @Getter
    @Setter
    private Boolean unsubscribe;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("processed")
    @Getter
    @Setter
    private Boolean processed;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("open")
    @Getter
    @Setter
    private Boolean open;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("click")
    @Getter
    @Setter
    private Boolean click;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("dropped")
    @Getter
    @Setter
    private Boolean dropped;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("friendly_name")
    @Getter
    @Setter
    private String friendlyName;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private String id;

    public EventWebhookBaseResponseProps() {}

    private EventWebhookBaseResponseProps(Builder builder) {
        this.enabled = builder.enabled;
        this.url = builder.url;
        this.accountStatusChange = builder.accountStatusChange;
        this.groupResubscribe = builder.groupResubscribe;
        this.delivered = builder.delivered;
        this.groupUnsubscribe = builder.groupUnsubscribe;
        this.spamReport = builder.spamReport;
        this.bounce = builder.bounce;
        this.deferred = builder.deferred;
        this.unsubscribe = builder.unsubscribe;
        this.processed = builder.processed;
        this.open = builder.open;
        this.click = builder.click;
        this.dropped = builder.dropped;
        this.friendlyName = builder.friendlyName;
        this.id = builder.id;
    }

    // Builder class for constructing object
    public static class Builder {

        private Boolean enabled;
        private String url;
        private Boolean accountStatusChange;
        private Boolean groupResubscribe;
        private Boolean delivered;
        private Boolean groupUnsubscribe;
        private Boolean spamReport;
        private Boolean bounce;
        private Boolean deferred;
        private Boolean unsubscribe;
        private Boolean processed;
        private Boolean open;
        private Boolean click;
        private Boolean dropped;
        private String friendlyName;
        private String id;

        public Builder() {}

        public Builder enabled(Boolean enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder url(String url) {
            this.url = url;
            return this;
        }

        public Builder accountStatusChange(Boolean accountStatusChange) {
            this.accountStatusChange = accountStatusChange;
            return this;
        }

        public Builder groupResubscribe(Boolean groupResubscribe) {
            this.groupResubscribe = groupResubscribe;
            return this;
        }

        public Builder delivered(Boolean delivered) {
            this.delivered = delivered;
            return this;
        }

        public Builder groupUnsubscribe(Boolean groupUnsubscribe) {
            this.groupUnsubscribe = groupUnsubscribe;
            return this;
        }

        public Builder spamReport(Boolean spamReport) {
            this.spamReport = spamReport;
            return this;
        }

        public Builder bounce(Boolean bounce) {
            this.bounce = bounce;
            return this;
        }

        public Builder deferred(Boolean deferred) {
            this.deferred = deferred;
            return this;
        }

        public Builder unsubscribe(Boolean unsubscribe) {
            this.unsubscribe = unsubscribe;
            return this;
        }

        public Builder processed(Boolean processed) {
            this.processed = processed;
            return this;
        }

        public Builder open(Boolean open) {
            this.open = open;
            return this;
        }

        public Builder click(Boolean click) {
            this.click = click;
            return this;
        }

        public Builder dropped(Boolean dropped) {
            this.dropped = dropped;
            return this;
        }

        public Builder friendlyName(String friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }

        public Builder id(String id) {
            this.id = id;
            return this;
        }

        public EventWebhookBaseResponseProps build() {
            return new EventWebhookBaseResponseProps(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            EventWebhookBaseResponseProps.class.getSimpleName() + "(",
            ")"
        );
        if (enabled != null) joiner.add("enabled=" + enabled);
        if (url != null) joiner.add("url=" + url);
        if (accountStatusChange != null) joiner.add(
            "accountStatusChange=" + accountStatusChange
        );
        if (groupResubscribe != null) joiner.add(
            "groupResubscribe=" + groupResubscribe
        );
        if (delivered != null) joiner.add("delivered=" + delivered);
        if (groupUnsubscribe != null) joiner.add(
            "groupUnsubscribe=" + groupUnsubscribe
        );
        if (spamReport != null) joiner.add("spamReport=" + spamReport);
        if (bounce != null) joiner.add("bounce=" + bounce);
        if (deferred != null) joiner.add("deferred=" + deferred);
        if (unsubscribe != null) joiner.add("unsubscribe=" + unsubscribe);
        if (processed != null) joiner.add("processed=" + processed);
        if (open != null) joiner.add("open=" + open);
        if (click != null) joiner.add("click=" + click);
        if (dropped != null) joiner.add("dropped=" + dropped);
        if (friendlyName != null) joiner.add("friendlyName=" + friendlyName);
        if (id != null) joiner.add("id=" + id);
        return joiner.toString();
    }
}
