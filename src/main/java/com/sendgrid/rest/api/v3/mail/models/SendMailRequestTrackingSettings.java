/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Mail API
 * The Twilio SendGrid v3 Mail API allows you to send email at scale over HTTP. The Mail Send endpoint supports many levels of functionality, allowing you to send templates, set categories and custom arguments that can be used to analyze your send, and configure which tracking settings to include such as opens and clicks. You can also group mail sends into batches, allowing you to schedule and cancel sends by their batch IDs.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.mail.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.mail.models.SendMailRequestTrackingSettingsClickTracking;
import com.sendgrid.rest.api.v3.mail.models.SendMailRequestTrackingSettingsGanalytics;
import com.sendgrid.rest.api.v3.mail.models.SendMailRequestTrackingSettingsOpenTracking;
import com.sendgrid.rest.api.v3.mail.models.SendMailRequestTrackingSettingsSubscriptionTracking;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class SendMailRequestTrackingSettings {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("click_tracking")
    @Getter
    @Setter
    private SendMailRequestTrackingSettingsClickTracking clickTracking;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("open_tracking")
    @Getter
    @Setter
    private SendMailRequestTrackingSettingsOpenTracking openTracking;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subscription_tracking")
    @Getter
    @Setter
    private SendMailRequestTrackingSettingsSubscriptionTracking subscriptionTracking;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("ganalytics")
    @Getter
    @Setter
    private SendMailRequestTrackingSettingsGanalytics ganalytics;

    public SendMailRequestTrackingSettings() {}

    private SendMailRequestTrackingSettings(Builder builder) {
        this.clickTracking = builder.clickTracking;
        this.openTracking = builder.openTracking;
        this.subscriptionTracking = builder.subscriptionTracking;
        this.ganalytics = builder.ganalytics;
    }

    // Builder class for constructing object
    public static class Builder {

        private SendMailRequestTrackingSettingsClickTracking clickTracking;
        private SendMailRequestTrackingSettingsOpenTracking openTracking;
        private SendMailRequestTrackingSettingsSubscriptionTracking subscriptionTracking;
        private SendMailRequestTrackingSettingsGanalytics ganalytics;

        public Builder() {}

        public Builder clickTracking(
            SendMailRequestTrackingSettingsClickTracking clickTracking
        ) {
            this.clickTracking = clickTracking;
            return this;
        }

        public Builder openTracking(
            SendMailRequestTrackingSettingsOpenTracking openTracking
        ) {
            this.openTracking = openTracking;
            return this;
        }

        public Builder subscriptionTracking(
            SendMailRequestTrackingSettingsSubscriptionTracking subscriptionTracking
        ) {
            this.subscriptionTracking = subscriptionTracking;
            return this;
        }

        public Builder ganalytics(
            SendMailRequestTrackingSettingsGanalytics ganalytics
        ) {
            this.ganalytics = ganalytics;
            return this;
        }

        public SendMailRequestTrackingSettings build() {
            return new SendMailRequestTrackingSettings(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            SendMailRequestTrackingSettings.class.getSimpleName() + "(",
            ")"
        );
        if (clickTracking != null) joiner.add("clickTracking=" + clickTracking);
        if (openTracking != null) joiner.add("openTracking=" + openTracking);
        if (subscriptionTracking != null) joiner.add(
            "subscriptionTracking=" + subscriptionTracking
        );
        if (ganalytics != null) joiner.add("ganalytics=" + ganalytics);
        return joiner.toString();
    }
}
