/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Marketing Campaigns Segments 2.0 API
 * The Twilio SendGrid Marketing Campaigns Segments V2 API allows you to create, edit, and delete segments as well as retrieve a list of segments or an individual segment by ID.  Segments are similar to contact lists, except they update dynamically over time as information stored about your contacts or the criteria used to define your segments changes. When you segment your audience, you are able to create personalized Automation emails and Single Sends that directly address the wants and needs of your particular audience.  Note that Twilio SendGrid checks for newly added or modified contacts who meet a segment's criteria on an hourly schedule. Only existing contacts who meet a segment's criteria will be included in the segment searches within 15 minutes.  Segments built using engagement data such as \"was sent\" or \"clicked\" will take approximately 30 minutes to begin populating.  Segment samples and counts are refreshed approximately once per hour; they do not update immediately. If no contacts are added to or removed from a segment since the last refresh, the sample and UI count displayed will be refreshed at increasing time intervals with a maximum sample and count refresh delay of 24 hours.  You can also manage your Segments with the [Marketing Campaigns application user interface](https://mc.sendgrid.com/contacts). See [**Segmenting Your Contacts**](https://docs.sendgrid.com/ui/managing-contacts/segmenting-your-contacts) for more information.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.mcsegments2.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.mcsegments2.models.ContactResponseCustomFields;
import java.util.List;
import java.util.StringJoiner;
import java.util.UUID;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class ContactResponse {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private UUID id;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("email")
    @Getter
    @Setter
    private String email;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("phone_number_id")
    @Getter
    @Setter
    private String phoneNumberId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("external_id")
    @Getter
    @Setter
    private String externalId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("anonymous_id")
    @Getter
    @Setter
    private String anonymousId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("alternate_emails")
    @Getter
    @Setter
    private List<String> alternateEmails;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("first_name")
    @Getter
    @Setter
    private String firstName;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("last_name")
    @Getter
    @Setter
    private String lastName;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("address_line_1")
    @Getter
    @Setter
    private String addressLine1;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("address_line_2")
    @Getter
    @Setter
    private String addressLine2;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("city")
    @Getter
    @Setter
    private String city;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("state_province_region")
    @Getter
    @Setter
    private String stateProvinceRegion;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("postal_code")
    @Getter
    @Setter
    private Integer postalCode;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("country")
    @Getter
    @Setter
    private String country;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("list_ids")
    @Getter
    @Setter
    private List<UUID> listIds;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("custom_fields")
    @Getter
    @Setter
    private ContactResponseCustomFields customFields;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("segment_ids")
    @Getter
    @Setter
    private List<UUID> segmentIds;

    public ContactResponse() {}

    private ContactResponse(Builder builder) {
        this.id = builder.id;
        this.email = builder.email;
        this.phoneNumberId = builder.phoneNumberId;
        this.externalId = builder.externalId;
        this.anonymousId = builder.anonymousId;
        this.alternateEmails = builder.alternateEmails;
        this.firstName = builder.firstName;
        this.lastName = builder.lastName;
        this.addressLine1 = builder.addressLine1;
        this.addressLine2 = builder.addressLine2;
        this.city = builder.city;
        this.stateProvinceRegion = builder.stateProvinceRegion;
        this.postalCode = builder.postalCode;
        this.country = builder.country;
        this.listIds = builder.listIds;
        this.customFields = builder.customFields;
        this.segmentIds = builder.segmentIds;
    }

    // Builder class for constructing object
    public static class Builder {

        private UUID id;
        private String email;
        private String phoneNumberId;
        private String externalId;
        private String anonymousId;
        private List<String> alternateEmails;
        private String firstName;
        private String lastName;
        private String addressLine1;
        private String addressLine2;
        private String city;
        private String stateProvinceRegion;
        private Integer postalCode;
        private String country;
        private List<UUID> listIds;
        private ContactResponseCustomFields customFields;
        private List<UUID> segmentIds;

        public Builder(
            UUID id,
            List<String> alternateEmails,
            String firstName,
            String lastName,
            String addressLine1,
            String addressLine2,
            String city,
            String stateProvinceRegion,
            Integer postalCode,
            String country,
            ContactResponseCustomFields customFields
        ) {
            this.id = id;
            this.alternateEmails = alternateEmails;
            this.firstName = firstName;
            this.lastName = lastName;
            this.addressLine1 = addressLine1;
            this.addressLine2 = addressLine2;
            this.city = city;
            this.stateProvinceRegion = stateProvinceRegion;
            this.postalCode = postalCode;
            this.country = country;
            this.customFields = customFields;
        }

        public Builder email(String email) {
            this.email = email;
            return this;
        }

        public Builder phoneNumberId(String phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        public Builder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }

        public Builder anonymousId(String anonymousId) {
            this.anonymousId = anonymousId;
            return this;
        }

        public Builder listIds(List<UUID> listIds) {
            this.listIds = listIds;
            return this;
        }

        public Builder segmentIds(List<UUID> segmentIds) {
            this.segmentIds = segmentIds;
            return this;
        }

        public ContactResponse build() {
            return new ContactResponse(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            ContactResponse.class.getSimpleName() + "(",
            ")"
        );
        if (id != null) joiner.add("id=" + id);
        if (email != null) joiner.add("email=" + email);
        if (phoneNumberId != null) joiner.add("phoneNumberId=" + phoneNumberId);
        if (externalId != null) joiner.add("externalId=" + externalId);
        if (anonymousId != null) joiner.add("anonymousId=" + anonymousId);
        if (alternateEmails != null) joiner.add(
            "alternateEmails=" + alternateEmails
        );
        if (firstName != null) joiner.add("firstName=" + firstName);
        if (lastName != null) joiner.add("lastName=" + lastName);
        if (addressLine1 != null) joiner.add("addressLine1=" + addressLine1);
        if (addressLine2 != null) joiner.add("addressLine2=" + addressLine2);
        if (city != null) joiner.add("city=" + city);
        if (stateProvinceRegion != null) joiner.add(
            "stateProvinceRegion=" + stateProvinceRegion
        );
        if (postalCode != null) joiner.add("postalCode=" + postalCode);
        if (country != null) joiner.add("country=" + country);
        if (listIds != null) joiner.add("listIds=" + listIds);
        if (customFields != null) joiner.add("customFields=" + customFields);
        if (segmentIds != null) joiner.add("segmentIds=" + segmentIds);
        return joiner.toString();
    }
}
