/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Domain Authentication API
 * The Twilio SendGrid Domain Authentication API allows you to manage your authenticated domains and their settings.  Domain Authentication is a required step when setting up your Twilio SendGrid account because it's essential to ensuring the deliverability of your email. Domain Authentication signals trustworthiness to email inbox providers and your recipients by approving SendGrid to send email on behalf of your domain. For more information, see [**How to Set Up Domain Authentication**](https://sendgrid.com/docs/ui/account-and-settings/how-to-set-up-domain-authentication/).  Each user may have a maximum of 3,000 authenticated domains and 3,000 link brandings. This limit is at the user level, meaning each Subuser belonging to a parent account may have its own 3,000 authenticated domains and 3,000 link brandings.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.domainauthentication.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.domainauthentication.models.ListAllAuthenticatedDomainWithUser200ResponseInnerDns;
import java.math.BigDecimal;
import java.util.List;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class ListAllAuthenticatedDomainWithUser200ResponseInner {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private BigDecimal id;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("user_id")
    @Getter
    @Setter
    private BigDecimal userId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subdomain")
    @Getter
    @Setter
    private String subdomain;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("domain")
    @Getter
    @Setter
    private String domain;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("username")
    @Getter
    @Setter
    private String username;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("ips")
    @Getter
    @Setter
    private List<String> ips;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("custom_spf")
    @Getter
    @Setter
    private Boolean customSpf;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("default")
    @Getter
    @Setter
    private Boolean _default;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("legacy")
    @Getter
    @Setter
    private Boolean legacy;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("automatic_security")
    @Getter
    @Setter
    private Boolean automaticSecurity;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("valid")
    @Getter
    @Setter
    private Boolean valid;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("dns")
    @Getter
    @Setter
    private ListAllAuthenticatedDomainWithUser200ResponseInnerDns dns;

    public ListAllAuthenticatedDomainWithUser200ResponseInner() {}

    private ListAllAuthenticatedDomainWithUser200ResponseInner(
        Builder builder
    ) {
        this.id = builder.id;
        this.userId = builder.userId;
        this.subdomain = builder.subdomain;
        this.domain = builder.domain;
        this.username = builder.username;
        this.ips = builder.ips;
        this.customSpf = builder.customSpf;
        this._default = builder._default;
        this.legacy = builder.legacy;
        this.automaticSecurity = builder.automaticSecurity;
        this.valid = builder.valid;
        this.dns = builder.dns;
    }

    // Builder class for constructing object
    public static class Builder {

        private BigDecimal id;
        private BigDecimal userId;
        private String subdomain;
        private String domain;
        private String username;
        private List<String> ips;
        private Boolean customSpf;
        private Boolean _default;
        private Boolean legacy;
        private Boolean automaticSecurity;
        private Boolean valid;
        private ListAllAuthenticatedDomainWithUser200ResponseInnerDns dns;

        public Builder(
            BigDecimal id,
            BigDecimal userId,
            String subdomain,
            String domain,
            String username,
            List<String> ips,
            Boolean customSpf,
            Boolean _default,
            Boolean legacy,
            Boolean automaticSecurity,
            Boolean valid,
            ListAllAuthenticatedDomainWithUser200ResponseInnerDns dns
        ) {
            this.id = id;
            this.userId = userId;
            this.subdomain = subdomain;
            this.domain = domain;
            this.username = username;
            this.ips = ips;
            this.customSpf = customSpf;
            this._default = _default;
            this.legacy = legacy;
            this.automaticSecurity = automaticSecurity;
            this.valid = valid;
            this.dns = dns;
        }

        public ListAllAuthenticatedDomainWithUser200ResponseInner build() {
            return new ListAllAuthenticatedDomainWithUser200ResponseInner(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            ListAllAuthenticatedDomainWithUser200ResponseInner.class.getSimpleName() +
            "(",
            ")"
        );
        if (id != null) joiner.add("id=" + id);
        if (userId != null) joiner.add("userId=" + userId);
        if (subdomain != null) joiner.add("subdomain=" + subdomain);
        if (domain != null) joiner.add("domain=" + domain);
        if (username != null) joiner.add("username=" + username);
        if (ips != null) joiner.add("ips=" + ips);
        if (customSpf != null) joiner.add("customSpf=" + customSpf);
        if (_default != null) joiner.add("_default=" + _default);
        if (legacy != null) joiner.add("legacy=" + legacy);
        if (automaticSecurity != null) joiner.add(
            "automaticSecurity=" + automaticSecurity
        );
        if (valid != null) joiner.add("valid=" + valid);
        if (dns != null) joiner.add("dns=" + dns);
        return joiner.toString();
    }
}
