/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Integrations API
 * Integrations allows you to connect your SendGrid applications with third-party services and forward SendGrid email events to those external applications. Currently, Integrations supports event forwarding to [Segment](https://segment.com/docs). You can use this API to create, delete, view, and update your Integrations.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.integrations.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.integrations.models.Destination3;
import com.sendgrid.rest.api.v3.integrations.models.IntegrationFilters;
import com.sendgrid.rest.api.v3.integrations.models.IntegrationProperties;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class Integration {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("integration_id")
    @Getter
    @Setter
    private String integrationId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("user_id")
    @Getter
    @Setter
    private String userId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("filters")
    @Getter
    @Setter
    private IntegrationFilters filters;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("properties")
    @Getter
    @Setter
    private IntegrationProperties properties;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("label")
    @Getter
    @Setter
    private String label;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("destination")
    @Getter
    @Setter
    private Destination3 destination;

    public Integration() {}

    private Integration(Builder builder) {
        this.integrationId = builder.integrationId;
        this.userId = builder.userId;
        this.filters = builder.filters;
        this.properties = builder.properties;
        this.label = builder.label;
        this.destination = builder.destination;
    }

    // Builder class for constructing object
    public static class Builder {

        private String integrationId;
        private String userId;
        private IntegrationFilters filters;
        private IntegrationProperties properties;
        private String label;
        private Destination3 destination;

        public Builder() {}

        public Builder integrationId(String integrationId) {
            this.integrationId = integrationId;
            return this;
        }

        public Builder userId(String userId) {
            this.userId = userId;
            return this;
        }

        public Builder filters(IntegrationFilters filters) {
            this.filters = filters;
            return this;
        }

        public Builder properties(IntegrationProperties properties) {
            this.properties = properties;
            return this;
        }

        public Builder label(String label) {
            this.label = label;
            return this;
        }

        public Builder destination(Destination3 destination) {
            this.destination = destination;
            return this;
        }

        public Integration build() {
            return new Integration(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            Integration.class.getSimpleName() + "(",
            ")"
        );
        if (integrationId != null) joiner.add("integrationId=" + integrationId);
        if (userId != null) joiner.add("userId=" + userId);
        if (filters != null) joiner.add("filters=" + filters);
        if (properties != null) joiner.add("properties=" + properties);
        if (label != null) joiner.add("label=" + label);
        if (destination != null) joiner.add("destination=" + destination);
        return joiner.toString();
    }
}
