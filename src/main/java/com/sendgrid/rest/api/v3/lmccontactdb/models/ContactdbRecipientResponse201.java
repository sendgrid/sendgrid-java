/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Legacy Marketing Campaigns Contacts API
 * The Twilio SendGrid Legacy Marketing Campaigns Contacts API allows you to manage your marketing contacts programmatically. This API is operational, but we recommend using the current version of Marketing Campaigns' [Contacts API](https://docs.sendgrid.com/api-reference/contacts/), [Lists API](https://docs.sendgrid.com/api-reference/lists/), and [Segments API](https://docs.sendgrid.com/api-reference/segmenting-contacts-v2/) to manage your contacts.  See [**Migrating from Legacy Marketing Campaigns**](https://docs.sendgrid.com/ui/sending-email/migrating-from-legacy-marketing-campaigns) for more information.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.lmccontactdb.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.lmccontactdb.models.ContactdbRecipientResponse201ErrorsInner;
import java.math.BigDecimal;
import java.util.List;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class ContactdbRecipientResponse201 {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("error_count")
    @Getter
    @Setter
    private BigDecimal errorCount;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("error_indices")
    @Getter
    @Setter
    private List<BigDecimal> errorIndices;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("new_count")
    @Getter
    @Setter
    private BigDecimal newCount;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("persisted_recipients")
    @Getter
    @Setter
    private List<String> persistedRecipients;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("updated_count")
    @Getter
    @Setter
    private BigDecimal updatedCount;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("errors")
    @Getter
    @Setter
    private List<ContactdbRecipientResponse201ErrorsInner> errors;

    public ContactdbRecipientResponse201() {}

    private ContactdbRecipientResponse201(Builder builder) {
        this.errorCount = builder.errorCount;
        this.errorIndices = builder.errorIndices;
        this.newCount = builder.newCount;
        this.persistedRecipients = builder.persistedRecipients;
        this.updatedCount = builder.updatedCount;
        this.errors = builder.errors;
    }

    // Builder class for constructing object
    public static class Builder {

        private BigDecimal errorCount;
        private List<BigDecimal> errorIndices;
        private BigDecimal newCount;
        private List<String> persistedRecipients;
        private BigDecimal updatedCount;
        private List<ContactdbRecipientResponse201ErrorsInner> errors;

        public Builder(
            BigDecimal errorCount,
            BigDecimal newCount,
            List<String> persistedRecipients,
            BigDecimal updatedCount
        ) {
            this.errorCount = errorCount;
            this.newCount = newCount;
            this.persistedRecipients = persistedRecipients;
            this.updatedCount = updatedCount;
        }

        public Builder errorIndices(List<BigDecimal> errorIndices) {
            this.errorIndices = errorIndices;
            return this;
        }

        public Builder errors(
            List<ContactdbRecipientResponse201ErrorsInner> errors
        ) {
            this.errors = errors;
            return this;
        }

        public ContactdbRecipientResponse201 build() {
            return new ContactdbRecipientResponse201(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            ContactdbRecipientResponse201.class.getSimpleName() + "(",
            ")"
        );
        if (errorCount != null) joiner.add("errorCount=" + errorCount);
        if (errorIndices != null) joiner.add("errorIndices=" + errorIndices);
        if (newCount != null) joiner.add("newCount=" + newCount);
        if (persistedRecipients != null) joiner.add(
            "persistedRecipients=" + persistedRecipients
        );
        if (updatedCount != null) joiner.add("updatedCount=" + updatedCount);
        if (errors != null) joiner.add("errors=" + errors);
        return joiner.toString();
    }
}
