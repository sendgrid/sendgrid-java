/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid IP Address API
 * The Twilio SendGrid IP Address API allows you to add and manage dedicated IP addresses and IP Pools for your SendGrid account and Subusers. If you are sending any significant amount of email, SendGrid typically suggests sending from dedicated IPs. It's also best to send marketing and transactional emails from separate IP addresses. In order to do this, you'll need to set up IP Pools, which are groups of dedicated IP addresses you define to send particular types of messages. See the [**Dedicated IP Addresses**](https://docs.sendgrid.com/ui/account-and-settings/dedicated-ip-addresses) for more information about obtaining and allocating IPs.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.ips.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.math.BigDecimal;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class ListRemainingIpCount200ResponseResultsInner {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("remaining")
    @Getter
    @Setter
    private Integer remaining;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("period")
    @Getter
    @Setter
    private String period;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("price_per_ip")
    @Getter
    @Setter
    private BigDecimal pricePerIp;

    public ListRemainingIpCount200ResponseResultsInner() {}

    private ListRemainingIpCount200ResponseResultsInner(Builder builder) {
        this.remaining = builder.remaining;
        this.period = builder.period;
        this.pricePerIp = builder.pricePerIp;
    }

    // Builder class for constructing object
    public static class Builder {

        private Integer remaining;
        private String period;
        private BigDecimal pricePerIp;

        public Builder(
            Integer remaining,
            String period,
            BigDecimal pricePerIp
        ) {
            this.remaining = remaining;
            this.period = period;
            this.pricePerIp = pricePerIp;
        }

        public ListRemainingIpCount200ResponseResultsInner build() {
            return new ListRemainingIpCount200ResponseResultsInner(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            ListRemainingIpCount200ResponseResultsInner.class.getSimpleName() +
            "(",
            ")"
        );
        if (remaining != null) joiner.add("remaining=" + remaining);
        if (period != null) joiner.add("period=" + period);
        if (pricePerIp != null) joiner.add("pricePerIp=" + pricePerIp);
        return joiner.toString();
    }
}
