/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Marketing Campaigns Segments API
 * This API was deprecated on December 31, 2022. Following deprecation, all segments created in the Marketing Campaigns user interface began using the [Segmentation v2 API](https://docs.sendgrid.com/api-reference/segmenting-contacts-v2).  To enable manual migration and data retrieval, this API's GET and DELETE operations will remain available. The POST (create) and PATCH (update) endpoints were removed on January 31, 2023 because it is no longer possible to create new v1 segments or modify existing ones. See our [Segmentation v1 to v2 upgrade instructions](https://docs.sendgrid.com/for-developers/sending-email/getting-started-the-marketing-campaigns-v2-segmentation-api#upgrade-a-v1-segment-to-v2) to manually migrate your segments to the v2 API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.mcsegments.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.StringJoiner;
import java.util.UUID;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class SegmentSummary {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private UUID id;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("contacts_count")
    @Getter
    @Setter
    private Integer contactsCount;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("created_at")
    @Getter
    @Setter
    private OffsetDateTime createdAt;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("name")
    @Getter
    @Setter
    private String name;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("parent_list_id")
    @Getter
    @Setter
    private UUID parentListId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("sample_updated_at")
    @Getter
    @Setter
    private OffsetDateTime sampleUpdatedAt;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("updated_at")
    @Getter
    @Setter
    private OffsetDateTime updatedAt;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("next_sample_update")
    @Getter
    @Setter
    private String nextSampleUpdate;

    public SegmentSummary() {}

    private SegmentSummary(Builder builder) {
        this.id = builder.id;
        this.contactsCount = builder.contactsCount;
        this.createdAt = builder.createdAt;
        this.name = builder.name;
        this.parentListId = builder.parentListId;
        this.sampleUpdatedAt = builder.sampleUpdatedAt;
        this.updatedAt = builder.updatedAt;
        this.nextSampleUpdate = builder.nextSampleUpdate;
    }

    // Builder class for constructing object
    public static class Builder {

        private UUID id;
        private Integer contactsCount;
        private OffsetDateTime createdAt;
        private String name;
        private UUID parentListId;
        private OffsetDateTime sampleUpdatedAt;
        private OffsetDateTime updatedAt;
        private String nextSampleUpdate;

        public Builder(
            UUID id,
            Integer contactsCount,
            OffsetDateTime createdAt,
            OffsetDateTime sampleUpdatedAt,
            OffsetDateTime updatedAt
        ) {
            this.id = id;
            this.contactsCount = contactsCount;
            this.createdAt = createdAt;
            this.sampleUpdatedAt = sampleUpdatedAt;
            this.updatedAt = updatedAt;
        }

        public Builder name(String name) {
            this.name = name;
            return this;
        }

        public Builder parentListId(UUID parentListId) {
            this.parentListId = parentListId;
            return this;
        }

        public Builder nextSampleUpdate(String nextSampleUpdate) {
            this.nextSampleUpdate = nextSampleUpdate;
            return this;
        }

        public SegmentSummary build() {
            return new SegmentSummary(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            SegmentSummary.class.getSimpleName() + "(",
            ")"
        );
        if (id != null) joiner.add("id=" + id);
        if (contactsCount != null) joiner.add("contactsCount=" + contactsCount);
        if (createdAt != null) joiner.add("createdAt=" + createdAt);
        if (name != null) joiner.add("name=" + name);
        if (parentListId != null) joiner.add("parentListId=" + parentListId);
        if (sampleUpdatedAt != null) joiner.add(
            "sampleUpdatedAt=" + sampleUpdatedAt
        );
        if (updatedAt != null) joiner.add("updatedAt=" + updatedAt);
        if (nextSampleUpdate != null) joiner.add(
            "nextSampleUpdate=" + nextSampleUpdate
        );
        return joiner.toString();
    }
}
