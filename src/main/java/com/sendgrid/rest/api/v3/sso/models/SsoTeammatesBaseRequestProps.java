/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Single Sign-On API
 * The Single Sign-On API allows you to manage your SAML 2.0 SSO configurations. You can also work with your SSO integrations using the SSO section of the [Twilio SendGrid application user interface](https://app.sendgrid.com/settings/sso).  The Single Sign-On Settings operations allow you to create, retrieve, modify, and delete SSO integrations for your Twilio SendGrid account. Each integration will correspond to a specific IdP such as Okta, Duo, or Microsoft Azure Active Directory.  The Single Sign-On Certificates operations allow you to create, modify, and delete SSO certificates. A SAML certificate allows your IdP and Twilio SendGrid to verify requests are coming from one another using the `public_certificate` and `integration_id` parameters.  The Single Sign-On Teammates operations allow you to add and modify SSO Teammates. SSO Teammates are the individual user accounts who will access your Twilio SendGrid account with SSO credentials. To retrieve or delete an SSO Teammate, you will use the separate [Teammates API](https://docs.sendgrid.com/api-reference/teammates/).
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.sso.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.sso.models.Persona;
import com.sendgrid.rest.api.v3.sso.models.SsoTeammatesBaseRequestPropsSubuserAccessInner;
import java.util.List;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class SsoTeammatesBaseRequestProps {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("first_name")
    @Getter
    @Setter
    private String firstName;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("last_name")
    @Getter
    @Setter
    private String lastName;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("is_admin")
    @Getter
    @Setter
    private Boolean isAdmin;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("persona")
    @Getter
    @Setter
    private Persona persona;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("scopes")
    @Getter
    @Setter
    private List<String> scopes;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("has_restricted_subuser_access")
    @Getter
    @Setter
    private Boolean hasRestrictedSubuserAccess;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subuser_access")
    @Getter
    @Setter
    private List<SsoTeammatesBaseRequestPropsSubuserAccessInner> subuserAccess;

    public SsoTeammatesBaseRequestProps() {}

    private SsoTeammatesBaseRequestProps(Builder builder) {
        this.firstName = builder.firstName;
        this.lastName = builder.lastName;
        this.isAdmin = builder.isAdmin;
        this.persona = builder.persona;
        this.scopes = builder.scopes;
        this.hasRestrictedSubuserAccess = builder.hasRestrictedSubuserAccess;
        this.subuserAccess = builder.subuserAccess;
    }

    // Builder class for constructing object
    public static class Builder {

        private String firstName;
        private String lastName;
        private Boolean isAdmin;
        private Persona persona;
        private List<String> scopes;
        private Boolean hasRestrictedSubuserAccess;
        private List<
            SsoTeammatesBaseRequestPropsSubuserAccessInner
        > subuserAccess;

        public Builder(String firstName, String lastName) {
            this.firstName = firstName;
            this.lastName = lastName;
        }

        public Builder isAdmin(Boolean isAdmin) {
            this.isAdmin = isAdmin;
            return this;
        }

        public Builder persona(Persona persona) {
            this.persona = persona;
            return this;
        }

        public Builder scopes(List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        public Builder hasRestrictedSubuserAccess(
            Boolean hasRestrictedSubuserAccess
        ) {
            this.hasRestrictedSubuserAccess = hasRestrictedSubuserAccess;
            return this;
        }

        public Builder subuserAccess(
            List<SsoTeammatesBaseRequestPropsSubuserAccessInner> subuserAccess
        ) {
            this.subuserAccess = subuserAccess;
            return this;
        }

        public SsoTeammatesBaseRequestProps build() {
            return new SsoTeammatesBaseRequestProps(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            SsoTeammatesBaseRequestProps.class.getSimpleName() + "(",
            ")"
        );
        if (firstName != null) joiner.add("firstName=" + firstName);
        if (lastName != null) joiner.add("lastName=" + lastName);
        if (isAdmin != null) joiner.add("isAdmin=" + isAdmin);
        if (persona != null) joiner.add("persona=" + persona);
        if (scopes != null) joiner.add("scopes=" + scopes);
        if (hasRestrictedSubuserAccess != null) joiner.add(
            "hasRestrictedSubuserAccess=" + hasRestrictedSubuserAccess
        );
        if (subuserAccess != null) joiner.add("subuserAccess=" + subuserAccess);
        return joiner.toString();
    }
}
