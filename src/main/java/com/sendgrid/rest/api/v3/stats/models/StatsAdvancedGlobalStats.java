/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Statistics API
 * The Twilio SendGrid Statistics API allows you to retrieve the various statistics related to your email program.  Tracking your emails is an important part of being a good sender and learning about how your users interact with your email. This includes everything from clicks and opens to looking at which browsers and mailbox providers your customers use.  SendGrid has broken up statistics in specific ways so that you can get at-a-glance data, as well as the details of how your email is being used.  Category statistics are available for the previous thirteen months only.  See [**Statistics Overview**](https://docs.sendgrid.com/ui/analytics-and-reporting/stats-overview) for more information.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.stats.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class StatsAdvancedGlobalStats {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("clicks")
    @Getter
    @Setter
    private Integer clicks;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unique_clicks")
    @Getter
    @Setter
    private Integer uniqueClicks;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("opens")
    @Getter
    @Setter
    private Integer opens;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unique_opens")
    @Getter
    @Setter
    private Integer uniqueOpens;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("blocks")
    @Getter
    @Setter
    private Integer blocks;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("bounce_drops")
    @Getter
    @Setter
    private Integer bounceDrops;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("bounces")
    @Getter
    @Setter
    private Integer bounces;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("deferred")
    @Getter
    @Setter
    private Integer deferred;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("delivered")
    @Getter
    @Setter
    private Integer delivered;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("invalid_emails")
    @Getter
    @Setter
    private Integer invalidEmails;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("processed")
    @Getter
    @Setter
    private Integer processed;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("requests")
    @Getter
    @Setter
    private Integer requests;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("spam_report_drops")
    @Getter
    @Setter
    private Integer spamReportDrops;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("spam_reports")
    @Getter
    @Setter
    private Integer spamReports;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unsubscribe_drops")
    @Getter
    @Setter
    private Integer unsubscribeDrops;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unsubscribes")
    @Getter
    @Setter
    private Integer unsubscribes;

    public StatsAdvancedGlobalStats() {}

    private StatsAdvancedGlobalStats(Builder builder) {
        this.clicks = builder.clicks;
        this.uniqueClicks = builder.uniqueClicks;
        this.opens = builder.opens;
        this.uniqueOpens = builder.uniqueOpens;
        this.blocks = builder.blocks;
        this.bounceDrops = builder.bounceDrops;
        this.bounces = builder.bounces;
        this.deferred = builder.deferred;
        this.delivered = builder.delivered;
        this.invalidEmails = builder.invalidEmails;
        this.processed = builder.processed;
        this.requests = builder.requests;
        this.spamReportDrops = builder.spamReportDrops;
        this.spamReports = builder.spamReports;
        this.unsubscribeDrops = builder.unsubscribeDrops;
        this.unsubscribes = builder.unsubscribes;
    }

    // Builder class for constructing object
    public static class Builder {

        private Integer clicks;
        private Integer uniqueClicks;
        private Integer opens;
        private Integer uniqueOpens;
        private Integer blocks;
        private Integer bounceDrops;
        private Integer bounces;
        private Integer deferred;
        private Integer delivered;
        private Integer invalidEmails;
        private Integer processed;
        private Integer requests;
        private Integer spamReportDrops;
        private Integer spamReports;
        private Integer unsubscribeDrops;
        private Integer unsubscribes;

        public Builder() {}

        public Builder clicks(Integer clicks) {
            this.clicks = clicks;
            return this;
        }

        public Builder uniqueClicks(Integer uniqueClicks) {
            this.uniqueClicks = uniqueClicks;
            return this;
        }

        public Builder opens(Integer opens) {
            this.opens = opens;
            return this;
        }

        public Builder uniqueOpens(Integer uniqueOpens) {
            this.uniqueOpens = uniqueOpens;
            return this;
        }

        public Builder blocks(Integer blocks) {
            this.blocks = blocks;
            return this;
        }

        public Builder bounceDrops(Integer bounceDrops) {
            this.bounceDrops = bounceDrops;
            return this;
        }

        public Builder bounces(Integer bounces) {
            this.bounces = bounces;
            return this;
        }

        public Builder deferred(Integer deferred) {
            this.deferred = deferred;
            return this;
        }

        public Builder delivered(Integer delivered) {
            this.delivered = delivered;
            return this;
        }

        public Builder invalidEmails(Integer invalidEmails) {
            this.invalidEmails = invalidEmails;
            return this;
        }

        public Builder processed(Integer processed) {
            this.processed = processed;
            return this;
        }

        public Builder requests(Integer requests) {
            this.requests = requests;
            return this;
        }

        public Builder spamReportDrops(Integer spamReportDrops) {
            this.spamReportDrops = spamReportDrops;
            return this;
        }

        public Builder spamReports(Integer spamReports) {
            this.spamReports = spamReports;
            return this;
        }

        public Builder unsubscribeDrops(Integer unsubscribeDrops) {
            this.unsubscribeDrops = unsubscribeDrops;
            return this;
        }

        public Builder unsubscribes(Integer unsubscribes) {
            this.unsubscribes = unsubscribes;
            return this;
        }

        public StatsAdvancedGlobalStats build() {
            return new StatsAdvancedGlobalStats(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            StatsAdvancedGlobalStats.class.getSimpleName() + "(",
            ")"
        );
        if (clicks != null) joiner.add("clicks=" + clicks);
        if (uniqueClicks != null) joiner.add("uniqueClicks=" + uniqueClicks);
        if (opens != null) joiner.add("opens=" + opens);
        if (uniqueOpens != null) joiner.add("uniqueOpens=" + uniqueOpens);
        if (blocks != null) joiner.add("blocks=" + blocks);
        if (bounceDrops != null) joiner.add("bounceDrops=" + bounceDrops);
        if (bounces != null) joiner.add("bounces=" + bounces);
        if (deferred != null) joiner.add("deferred=" + deferred);
        if (delivered != null) joiner.add("delivered=" + delivered);
        if (invalidEmails != null) joiner.add("invalidEmails=" + invalidEmails);
        if (processed != null) joiner.add("processed=" + processed);
        if (requests != null) joiner.add("requests=" + requests);
        if (spamReportDrops != null) joiner.add(
            "spamReportDrops=" + spamReportDrops
        );
        if (spamReports != null) joiner.add("spamReports=" + spamReports);
        if (unsubscribeDrops != null) joiner.add(
            "unsubscribeDrops=" + unsubscribeDrops
        );
        if (unsubscribes != null) joiner.add("unsubscribes=" + unsubscribes);
        return joiner.toString();
    }
}
