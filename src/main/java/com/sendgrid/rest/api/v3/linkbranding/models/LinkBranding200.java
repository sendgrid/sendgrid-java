/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Link Branding API
 * The Twilio SendGrid Link Branding API allows you to configure your domain settings so that all of the click-tracked links, opens, and images in your emails are served from your domain rather than `sendgrid.net`. Spam filters and recipient servers look at the links within emails to determine whether the email appear trustworthy. They use the reputation of the root domain to determine whether the links can be trusted.  You can also manage Link Branding in the **Sender Authentication** section of the Twilio SendGrid application user interface.   See [**How to Set Up Link Branding**](https: //sendgrid.com/docs/ui/account-and-settings/how-to-set-up-link-branding/) for more information.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.linkbranding.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.linkbranding.models.Default2;
import com.sendgrid.rest.api.v3.linkbranding.models.Legacy;
import com.sendgrid.rest.api.v3.linkbranding.models.LinkBranding200Dns;
import com.sendgrid.rest.api.v3.linkbranding.models.Valid3;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class LinkBranding200 {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private Integer id;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("domain")
    @Getter
    @Setter
    private String domain;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subdomain")
    @Getter
    @Setter
    private String subdomain;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("username")
    @Getter
    @Setter
    private String username;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("user_id")
    @Getter
    @Setter
    private Integer userId;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("default")
    @Getter
    @Setter
    private Default2 _default;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("valid")
    @Getter
    @Setter
    private Valid3 valid;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("legacy")
    @Getter
    @Setter
    private Legacy legacy;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("dns")
    @Getter
    @Setter
    private LinkBranding200Dns dns;

    public LinkBranding200() {}

    private LinkBranding200(Builder builder) {
        this.id = builder.id;
        this.domain = builder.domain;
        this.subdomain = builder.subdomain;
        this.username = builder.username;
        this.userId = builder.userId;
        this._default = builder._default;
        this.valid = builder.valid;
        this.legacy = builder.legacy;
        this.dns = builder.dns;
    }

    // Builder class for constructing object
    public static class Builder {

        private Integer id;
        private String domain;
        private String subdomain;
        private String username;
        private Integer userId;
        private Default2 _default;
        private Valid3 valid;
        private Legacy legacy;
        private LinkBranding200Dns dns;

        public Builder(
            Integer id,
            String domain,
            String username,
            Integer userId,
            Default2 _default,
            Valid3 valid,
            Legacy legacy,
            LinkBranding200Dns dns
        ) {
            this.id = id;
            this.domain = domain;
            this.username = username;
            this.userId = userId;
            this._default = _default;
            this.valid = valid;
            this.legacy = legacy;
            this.dns = dns;
        }

        public Builder subdomain(String subdomain) {
            this.subdomain = subdomain;
            return this;
        }

        public LinkBranding200 build() {
            return new LinkBranding200(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            LinkBranding200.class.getSimpleName() + "(",
            ")"
        );
        if (id != null) joiner.add("id=" + id);
        if (domain != null) joiner.add("domain=" + domain);
        if (subdomain != null) joiner.add("subdomain=" + subdomain);
        if (username != null) joiner.add("username=" + username);
        if (userId != null) joiner.add("userId=" + userId);
        if (_default != null) joiner.add("_default=" + _default);
        if (valid != null) joiner.add("valid=" + valid);
        if (legacy != null) joiner.add("legacy=" + legacy);
        if (dns != null) joiner.add("dns=" + dns);
        return joiner.toString();
    }
}
