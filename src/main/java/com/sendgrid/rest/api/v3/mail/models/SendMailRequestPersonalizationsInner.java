/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Mail API
 * The Twilio SendGrid v3 Mail API allows you to send email at scale over HTTP. The Mail Send endpoint supports many levels of functionality, allowing you to send templates, set categories and custom arguments that can be used to analyze your send, and configure which tracking settings to include such as opens and clicks. You can also group mail sends into batches, allowing you to schedule and cancel sends by their batch IDs.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sendgrid.rest.api.v3.mail.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.sendgrid.rest.api.v3.mail.models.MailFrom;
import com.sendgrid.rest.api.v3.mail.models.MailTo;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@ToString
public class SendMailRequestPersonalizationsInner {

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("from")
    @Getter
    @Setter
    private MailFrom from;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("to")
    @Getter
    @Setter
    private List<MailTo> to;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("cc")
    @Getter
    @Setter
    private List<MailTo> cc;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("bcc")
    @Getter
    @Setter
    private List<MailTo> bcc;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subject")
    @Getter
    @Setter
    private String subject;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("headers")
    @Getter
    @Setter
    private Object headers;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("substitutions")
    @Getter
    @Setter
    private Map<String, String> substitutions;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("dynamic_template_data")
    @Getter
    @Setter
    private Object dynamicTemplateData;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("custom_args")
    @Getter
    @Setter
    private Object customArgs;

    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("send_at")
    @Getter
    @Setter
    private Integer sendAt;

    public SendMailRequestPersonalizationsInner() {}

    private SendMailRequestPersonalizationsInner(Builder builder) {
        this.from = builder.from;
        this.to = builder.to;
        this.cc = builder.cc;
        this.bcc = builder.bcc;
        this.subject = builder.subject;
        this.headers = builder.headers;
        this.substitutions = builder.substitutions;
        this.dynamicTemplateData = builder.dynamicTemplateData;
        this.customArgs = builder.customArgs;
        this.sendAt = builder.sendAt;
    }

    // Builder class for constructing object
    public static class Builder {

        private MailFrom from;
        private List<MailTo> to;
        private List<MailTo> cc;
        private List<MailTo> bcc;
        private String subject;
        private Object headers;
        private Map<String, String> substitutions;
        private Object dynamicTemplateData;
        private Object customArgs;
        private Integer sendAt;

        public Builder(List<MailTo> to) {
            this.to = to;
        }

        public Builder from(MailFrom from) {
            this.from = from;
            return this;
        }

        public Builder cc(List<MailTo> cc) {
            this.cc = cc;
            return this;
        }

        public Builder bcc(List<MailTo> bcc) {
            this.bcc = bcc;
            return this;
        }

        public Builder subject(String subject) {
            this.subject = subject;
            return this;
        }

        public Builder headers(Object headers) {
            this.headers = headers;
            return this;
        }

        public Builder substitutions(Map<String, String> substitutions) {
            this.substitutions = substitutions;
            return this;
        }

        public Builder dynamicTemplateData(Object dynamicTemplateData) {
            this.dynamicTemplateData = dynamicTemplateData;
            return this;
        }

        public Builder customArgs(Object customArgs) {
            this.customArgs = customArgs;
            return this;
        }

        public Builder sendAt(Integer sendAt) {
            this.sendAt = sendAt;
            return this;
        }

        public SendMailRequestPersonalizationsInner build() {
            return new SendMailRequestPersonalizationsInner(this);
        }
    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(
            ", ",
            SendMailRequestPersonalizationsInner.class.getSimpleName() + "(",
            ")"
        );
        if (from != null) joiner.add("from=" + from);
        if (to != null) joiner.add("to=" + to);
        if (cc != null) joiner.add("cc=" + cc);
        if (bcc != null) joiner.add("bcc=" + bcc);
        if (subject != null) joiner.add("subject=" + subject);
        if (headers != null) joiner.add("headers=" + headers);
        if (substitutions != null) joiner.add("substitutions=" + substitutions);
        if (dynamicTemplateData != null) joiner.add(
            "dynamicTemplateData=" + dynamicTemplateData
        );
        if (customArgs != null) joiner.add("customArgs=" + customArgs);
        if (sendAt != null) joiner.add("sendAt=" + sendAt);
        return joiner.toString();
    }
}
